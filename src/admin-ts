import {
  Component,
  OnInit,
  ChangeDetectionStrategy,
  ViewChild,
  TemplateRef,
  ElementRef
} from '@angular/core';
import {
  startOfDay,
  endOfDay,
  subDays,
  addDays,
  endOfMonth,
  isSameDay,
  isSameMonth,
  addHours
} from 'date-fns';
import { Subject } from 'rxjs';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { ModalModule } from 'ngb-modal';
import { collapseAnimation } from 'angular-calendar';
import {
  CalendarEvent,
  CalendarEventAction,
  CalendarEventTimesChangedEvent,
  CalendarView
} from 'angular-calendar';

//colors
const colors: any = {
  red: {
    primary: '#ad2121',
    secondary: '#FAE3E3'
  },
  blue: {
    primary: '#1e90ff',
    secondary: '#D1E8FF'
  },
  yellow: {
    primary: '#e3bc08',
    secondary: '#FDF1BA'
  }
}

import { SocketService } from './../../socket.service';
import { AppService } from './../../app.service';

import { Router } from '@angular/router';
import { Cookie } from 'ng2-cookies/ng2-cookies';
import { ToastrManager } from 'ng6-toastr-notifications';
import { Observable } from 'rxjs/Observable';
import { Subscriber } from 'rxjs/Subscriber'
//import {BrowserAnimationsModule} from 
import {ChangeDetectorRef} from '@angular/core'



@Component({
  selector: 'app-admin-view',
  templateUrl: './admin-view.component.html',
  styleUrls: ['./admin-view.component.css'],
  //changeDetection: ChangeDetectionStrategy.OnPush,

  animations: [collapseAnimation],
  providers: [SocketService]
})
export class AdminViewComponent implements OnInit {

  @ViewChild('modalContent') modalContent: TemplateRef<any>;

  view: CalendarView = CalendarView.Month;

  CalendarView = CalendarView;

  viewDate: Date = new Date();
  




  modalData: {
    action: string;
    event: CalendarEvent;
  };

  actions: CalendarEventAction[] = [
    {
      label: '<i class="fa fa-fw fa-pencil"></i>',
      onClick: ({ event }: { event: CalendarEvent }): void => {
        this.handleEvent('Edited', event);
      }
    },
    {
      label: '<i class="fa fa-fw fa-times"></i>',
      onClick: ({ event }: { event: CalendarEvent }): void => {
        this.events = this.events.filter(iEvent => iEvent !== event);
        this.handleEvent('Deleted', event);
      }
    }
  ];

  refresh: Subject<any> = new Subject();

  eventlist1: any =[];

   events: CalendarEvent[] 
  //  [
  //   {
  //     start: startOfDay(new Date()),
  //     title: '',
  //     color: colors.yellow,
  //     actions: this.actions
  //   },
  //   {
  //     start: subDays(startOfDay(new Date()), 1),
  //     end: addDays(new Date(), 1),
  //     title: 'A 3 day event',
  //     color: colors.red,
  //     actions: this.actions,
  //     allDay: true,
  //     resizable: {
  //       beforeStart: true,
  //       afterEnd: true
  //     },
  //     draggable: true
  //   },
    
  // ];

  //activeDayIsOpen: boolean = true;//iske bare me dekhna hai
  activeDayIsOpen: boolean
  




  

  public authToken: any;
  public userInfo: any;
  //public receiverId: any;
  //public receiverName: any;
  public userList: any = [];
  public disconnectedSocket: boolean;
  socketid: any;
  public dayViewToken = false;
  userSelectedUsername: string;
  userSelectedemail: string;
  userSelectedfullName: string;
  
  


  constructor(
    public AppService: AppService,
    public SocketService: SocketService,
    public router: Router,
    private toastr: ToastrManager,
    private changeDetectorRef: ChangeDetectorRef,
    private modal: NgbModal

  ) {
    
  }
  dayClicked({ date, events }: { date: Date; events: CalendarEvent[] }): void {
    this.dayViewToken =true;
    this.view = CalendarView.Week
   // this.changeDetectorRef.detectChanges();
    if (isSameMonth(date, this.viewDate)) {
      this.viewDate = date;
      this.changeDetectorRef.detectChanges();
      
      if (
        (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||
        events.length === 0
      ) {
        //this.dayViewToken =true;
        //this.activeDayIsOpen = false;
      } else {
        
        this.activeDayIsOpen = true;
      }
      console.log(this.viewDate + "-------------  ");

      console.log(this.dayViewToken); 
    }
  }
  

  eventTimesChanged({
    event,
    newStart,
    newEnd
  }: CalendarEventTimesChangedEvent): void {
    this.events = this.events.map(iEvent => {
      if (iEvent === event) {
        return {
          ...event,
          start: newStart,
          end: newEnd
        };
      }
      return iEvent;
    });
    this.handleEvent('Dropped or resized', event);
  }

  handleEvent(action: string, event: CalendarEvent): void {
    this.modalData = { event, action };
    this.modal.open(this.modalContent, { size: 'lg' });
  }

  addEvent(): void {
    this.events = [
      ...this.events,
      {
        title: 'New event',
        start: startOfDay(new Date()),
        end: endOfDay(new Date()),
        color: colors.red,
        draggable: true,
        resizable: {
          beforeStart: true,
          afterEnd: true
        }
      }
    ];
  }

  deleteEvent(eventToDelete: CalendarEvent) {
    this.events = this.events.filter(event => event !== eventToDelete);
  }

  setView(view: CalendarView) {
    this.view = view;
  }

  closeOpenMonthViewDay() {
    this.activeDayIsOpen = false;
    this.changeDetectorRef.detectChanges();
  }

  ngOnInit() {

    this.authToken = Cookie.get('authtoken');

    this.userInfo = this.AppService.getUserInfoFromLocalstorage();
    this.userSelectedUsername = Cookie.get('userSelectedUsername');
    this.socketid = Cookie.get('socketId');
    this.userSelectedemail = Cookie.get('userSelectedemail');
    this.userSelectedfullName = Cookie.get('userSelectedfullName');
    //console.log(this.receiverId, this.receiverName)

    // if (this.receiverId != null && this.receiverId != undefined && this.receiverId != '') {
    //   this.userSelectedByAdmin(this.receiverId, this.receiverName)
    // }

    this.checkStatus();

    this.verifyUserConfirmation();

    this.getOnlineUserList()

    console.log(this.userList);
  console.log("-------------------------------------")
    console.log(this.dayViewToken);

  }

  public checkStatus: any = () => {

    if (Cookie.get('authtoken') === undefined || Cookie.get('authtoken') === '' || Cookie.get('authtoken') === null) {

      this.router.navigate(['/']);

      return false;

    } else {

      return true;

    }

  } // end checkStatus

  public verifyUserConfirmation: any = () => {

    this.SocketService.verifyUser()
      .subscribe((data) => {

        console.log("verifing user ................")
        //console.log("data is : ", data);

        this.disconnectedSocket = false;
        
        let data1 = {authToken:this.authToken,userSocketId:this.socketid}
        this.SocketService.setUser(data1);
        console.log(",,,,,,,,,,,,,,,,")
        console.log(this.authToken)
        this.getOnlineUserList()

      });
  }

  public getOnlineUserList: any = () => {
    console.log('##########################################')

    this.SocketService.onlineUserList()
      .subscribe((userList) => {

        this.userList = [];

        for (let x of userList) {
          console.log(x)

          let temp = x

          this.userList.push(temp);

        }

        console.log(this.userList);

      }); // end online-user-list
  }

  public userSelectedByAdmin: any = (userName, email,fullName) => {
    

    console.log("setting user as active")

    // setting that user to chatting true   
    this.userList.map((user) => {
      if (user.userName == userName) {
        user.viewing = true;
      }
      else {
        user.viewing = false;
      }
    })

    Cookie.set('userSelectedUsername', userName);

    Cookie.set('userSelectedemail',email);
    Cookie.set('userSelectedfullName',fullName)


    this.userSelectedUsername = userName;

    this.userSelectedemail = email;
    
    this.userSelectedfullName = fullName;

    //this.eventlist1=[]
    this.getAllEventsOfAUser(this.userSelectedUsername);

    // let eventDetails = {
    //   userId: this.userInfo.userId,
    //   senderId: id
    // }
    console.log("---------------",this.userSelectedUsername);
   
    //console.log("---------------",this.userSelectedUsername);

   } // end userBtnClick function
   
   public getAllEventsOfAUser:any = (email) => {
     console.log("-----------++++++++++++++++++",email)
     this.AppService.getSingleUserEvents(email).subscribe((apiResponse) => {
      //if (apiResponse.status === 200){
        console.log(apiResponse);
        this.eventlist1=[]
        if(apiResponse.data.length >0)
        {  
          
          for(let x =0 ;x < apiResponse.data.length;x++)
          {
            let temp = {
              start: new Date(apiResponse.data[x].startTime),
              end: new Date (apiResponse.data[x].endTime),
              title: apiResponse.data[x].eventTitle,
              color: colors.red,
              actions: this.actions,
              eventId:apiResponse.data[x].eventId
              // allDay: true,
              // resizable: {
              //   beforeStart: true,
              //   afterEnd: true
              // },
              // draggable: true
            }
            
            this.eventlist1.push(temp);
            
            //console.log(this.eventlist1)


            
          }
          this.events = this.eventlist1;
          console.log(this.eventlist1)
        }
      //}
      // else{
      //   console.log("the data for events are not fetched check")
      // }
       
     })
   }

   //logout function

  //  public logout: any = () => {

  //   this.AppService.logout()
  //     .subscribe((apiResponse) => {

  //       if (apiResponse.status === 200) {
  //         console.log("logout called")
  //         // Cookie.delete('authtoken');

  //         // Cookie.delete('receiverId');

  //         // Cookie.delete('receiverName');
  //         Cookie.deleteAll();
  //         this.SocketService.exitSocket()

  //         this.router.navigate(['/']);

  //       } else {
  //         this.toastr.errorToastr(apiResponse.message)

  //       } // end condition

  //     }, (err) => {
  //       this.toastr.errorToastr('some error occured')


  //     });

  // } // end logout

  //go-to -dashboard
  // public goToDashboard = () =>{
  //   Cookie.delete('userSelectedUsername');
  //   Cookie.delete('userSelectedemail');
  //   Cookie.delete('userSelectedfullName');
  //   this.viewDate = new Date();
  //   this.dayViewToken =false;
  //   this.view = CalendarView.Month;
  //   this.changeDetectorRef.detectChanges();
  // }

}
